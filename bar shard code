<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Cumulative Bar Chart with Colors</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .chart {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 20px;
        }
        .controls {
            margin: 20px;
        }
        .axis-label {
            font-size: 14px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Calorie Counter - Cumulative Bar Chart</h1>
    <div class="controls">
        <h2>Select Food Items:</h2>
        <div id="food-options"></div>
    </div>
    <div class="chart">
        <svg id="bar-chart" width="400" height="400"></svg>
    </div>

    <script>
        // Food data
        const foodItems = [
            { name: "Apple", calories: 95 },
            { name: "Banana", calories: 105 },
            { name: "Pizza Slice", calories: 285 },
            { name: "Burger", calories: 354 },
            { name: "Ice Cream", calories: 207 },
            { name: "Fries", calories: 365 }
        ];

        const margin = { top: 20, right: 20, bottom: 50, left: 50 };
        const width = 400 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const svg = d3.select("#bar-chart")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left}, ${margin.top})`);

        const xScale = d3.scaleBand()
            .range([0, width])
            .domain(["Cumulative Calories"])
            .padding(0.2);

        const yScale = d3.scaleLinear()
            .range([height, 0]);

        const xAxis = svg.append("g")
            .attr("transform", `translate(0, ${height})`);

        const yAxis = svg.append("g");

        const color = d3.scaleOrdinal(d3.schemeCategory10); // Distinct colors for each food item

        let selectedItems = [];

        // Render food options as checkboxes
        const foodOptionsContainer = d3.select("#food-options");
        foodItems.forEach(item => {
            foodOptionsContainer.append("div")
                .html(`<label><input type="checkbox" value="${item.name}">${item.name} (${item.calories} cal)</label>`)
                .on("change", function () {
                    const selected = d3.select(this).select("input").property("checked");
                    if (selected) {
                        selectedItems.push(item);
                    } else {
                        selectedItems = selectedItems.filter(f => f.name !== item.name);
                    }
                    updateChart();
                });
        });

        function updateChart() {
            // Calculate cumulative data for stacked bar segments
            let cumulative = 0;
            const data = selectedItems.map(item => {
                const start = cumulative;
                cumulative += item.calories;
                return { ...item, start, end: cumulative };
            });

            // Update y-scale domain
            yScale.domain([0, Math.max(cumulative, 500)]); // Default max for better scaling

            // Bind data to segments
            const bars = svg.selectAll(".segment")
                .data(data, d => d.name);

            // Enter new segments
            bars.enter()
                .append("rect")
                .attr("class", "segment")
                .attr("x", xScale("Cumulative Calories"))
                .attr("y", height)
                .attr("width", xScale.bandwidth())
                .attr("height", 0)
                .attr("fill", d => color(d.name))
                .merge(bars)
                .transition()
                .duration(500)
                .attr("x", xScale("Cumulative Calories"))
                .attr("y", d => yScale(d.end))
                .attr("width", xScale.bandwidth())
                .attr("height", d => yScale(d.start) - yScale(d.end))
                .attr("fill", d => color(d.name));

            // Remove old segments
            bars.exit().remove();

            // Update axes
            xAxis.call(d3.axisBottom(xScale));
            yAxis.call(d3.axisLeft(yScale).ticks(5));
        }

        // Initial empty chart
        updateChart();
    </script>
</body>
</html>
